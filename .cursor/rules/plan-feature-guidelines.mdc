---
description: When discussing, implementing, or working on new features and bug fixes.
globs: 
alwaysApply: false
---
# Issues Guidelines Creation

## Overview

This rule provides guidelines for creating feature specification files in the `${workspaceFolder}/.plan/` directory. These files serve as implementation guidelines for future development work and should be concise, implementation-focused documents.

## Directory Structure and File Format

- All feature guideline files should be placed in `${workspaceFolder}/.plan/` directory
- File naming format should be `{feature-number}-{step-number}-{conventional-commit-feature-type}-{brief-description}.md`
- Examples:
  - `${workspaceFolder}/.plan/1-1-feat-add-new-publish-video-workflow/1-1-add-new-publish-video-workflow.md`
  - `${workspaceFolder}/.plan/1-2-fix-fix-publish-video-workflow/1-2-fix-publish-video-workflow.md`
  - `${workspaceFolder}/.plan/2-1-fix-resolve-auth-bug/2-1-fix-resolve-auth-bug.md`

## File Organization

- Guidelines are written in `.md` format (Markdown)
- Each feature should have its own subdirectory under `${workspaceFolder}/.plan/`
- The feature numbers start with 1 and grow incrementally e.g. `1-1-feat-desc` followed by `2-1-feat-desc` etc.
- The step numbers start with 1 and grow incrementally as well. When starting new development chat sessions or discussions about the same feature, create additional files with incremented step numbers e.g. `1-1-feat-desc` followed by `1-2-feat-desc`.
- The feature type is a conventional commit type e.g. `feature`, `fix`, etc.
- The brief description is a concise, summarized description of the feature. Description words can be separated by dashes.

## Guideline Content Structure

- The file should contain a Context, Requirements, and Implementation plan
- Avoid explicit code examples; instead explain what needs to be done. The rationale is to let the AI decide on implementation details when reading the guideline in future prompts
- You can reference existing files for examples. Don't be too verbose, just give the file name and general location
- Focus on the "what" rather than the "how". 

## Iterative Development

- Plan files may be refined during implementation discussions
- When requirements change during development, update the file to reflect the final agreed approach
- Remove implementation examples if they become outdated or overly prescriptive
- Create new step files for significant changes or additions to the feature scope
